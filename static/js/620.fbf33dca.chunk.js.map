{"version":3,"file":"static/js/620.fbf33dca.chunk.js","mappings":"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","sources":["HOC/withAuthRedirect.tsx","webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/Posts/Post/Post.module.css?59e2","components/Profile/Posts/Post/Post.tsx","webpack://samurai-way/./src/components/Profile/Posts/posts.module.css?c81e","components/Profile/Posts/AddPostForm.tsx","components/Profile/Posts/Posts.tsx","components/Profile/Posts/PostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["import React, {ComponentType} from 'react';\nimport {Redirect} from 'react-router-dom';\nimport {connect} from 'react-redux';\nimport {AppStateType} from '../redux/redux-store';\n\ntype mapStatePropsType = {\n    isAuth: boolean\n}\nconst mapStateToProps = (state: AppStateType): mapStatePropsType => ({\n    isAuth: state.auth.isAuth\n})\n\n// Типизация HOC !\nfunction WithAuthRedirect<T>(Component: ComponentType<T>) {\n    const RedirectComponent = (props: mapStatePropsType) => {\n        let {isAuth, ...restProps} = props\n        if (!isAuth) {\n            // на 6 версии router-dom\n            // return <Navigate to={'/login'}/>\n            return <Redirect to={'/login'}/>\n        }\n        return <Component{...restProps as T}/>\n    }\n    let ConnectedAuthRedirectComponent = connect(mapStateToProps)(RedirectComponent)\n    return ConnectedAuthRedirectComponent\n}\n\nexport default WithAuthRedirect;","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"ProfileInfo_content__DznCY\",\"img\":\"ProfileInfo_img__+4bLE\"};","import React, {ChangeEvent} from \"react\";\nimport s from \"./ProfileInfo.module.css\"\nimport image from \"../../../img/picture.jpg\"\nimport {profileType} from '../../../redux/profile-reducer';\nimport Preloader from '../../common/Preloader/Preloader';\nimport login from '../../Login/Login';\n\ntype ProfileStatusType = {\n    status: string\n    updateUserStatus: (status: string) => void\n}\n\nclass ProfileStatus extends React.Component<ProfileStatusType> {\n\n    state = {\n        editMode: false,\n        status: this.props.status\n    }\n\n    activeEditMode = () => {\n        this.setState({editMode: true})\n    }\n    deactiveEditMode = () => {\n        this.setState({editMode: false})\n        this.props.updateUserStatus(this.state.status)\n    }\n    onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\n        this.setState({status: e.currentTarget.value})\n    }\n\n    componentDidUpdate(prevProps: Readonly<ProfileStatusType>, prevState: Readonly<{}>, snapshot?: any) {\n        if(prevProps.status!==this.state.status){\n            this.setState({status:this.props.status})\n        }\n    }\n\n    render() {\n\n        return (\n\n            <div>{!this.state.editMode\n                ? <span onDoubleClick={this.activeEditMode}>\n                {this.props.status}\n            </span>\n                : <div>\n                    <input onChange={(e) => this.onStatusChange(e)} type=\"text\"\n                           value={this.state.status}\n                           onBlur={this.deactiveEditMode} autoFocus={true}/>\n                </div>}\n            </div>);\n\n\n    }\n}\n\nexport default ProfileStatus;","import React from \"react\";\nimport s from \"./ProfileInfo.module.css\"\nimport {profileType} from '../../../redux/profile-reducer';\nimport Preloader from '../../common/Preloader/Preloader';\nimport ProfileStatus from './ProfileStatus';\n\ntype ProfileInfoType = {\n    profile: profileType | null\n    status:  string\n    updateUserStatus:(status:string)=>void\n}\n\nfunction ProfileInfo({profile,status,updateUserStatus}: ProfileInfoType) {\n\n    if (!profile) {\n        return <Preloader/>\n    }\n    return (\n\n        <div>\n            {/*<img src={image} alt={'картинка'} className={s.img}/>*/}\n            {profile.photos.large ? <img src={profile.photos.large}/> : \"\"}\n\n\n            <div className={s.content}>\n                <ProfileStatus status={status}  updateUserStatus={updateUserStatus}/>\n                <div>{profile.fullName}</div>\n                <div>{profile.aboutMe}</div>\n                <div>{profile.lookingForAJob}</div>\n                <div>{profile.lookingForAJobDescription}</div>\n            </div>\n        </div>);\n\n\n}\n\nexport default ProfileInfo;","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__FKz4t\",\"style\":\"Post_style__pP+Ky\"};","import React from 'react';\nimport s  from \"./Post.module.css\"\nimport Image from \"../../../../img/logoPost.jpg\";\n\ntype PostPropsType = {\n    message: string\n    likesCount: number\n}\n\nfunction Post(props: PostPropsType) {\n    return (\n        <>\n            <div className={s.item}>\n                <img className={s.style} src={Image}/>\n\n                {props.message}</div>\n            <div> Нравится {props.likesCount}</div>\n        </>\n    );\n}\n\nexport default Post;","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"posts_postsBlock__LahyW\",\"posts\":\"posts_posts__Rg3-E\"};","import React from 'react';\nimport {FieldValues, useForm} from 'react-hook-form';\n\ntype AddPostPropsType = {\n    addPost: (postMessage: string) => void\n}\n\ntype Inputs = {\n    post: string,\n};\nexport const AddPostForm = ({addPost}: AddPostPropsType) => {\n    const {register, handleSubmit, reset, formState: {errors, isValid}} = useForm<Inputs>({mode: 'onSubmit'})\n    const onSubmit = (data: FieldValues) => {\n        addPost(data.post)\n        reset()\n    }\n    return <>\n        <form onSubmit={handleSubmit(onSubmit)}>\n            <input type=\"text\" placeholder={'Введите сообщение...'} {...register('post', {\n                required: true,\n                minLength: {\n                    value: 10,\n                    message: 'Минимальная длина поста: 10 символов'\n                }\n            })}/>\n            <div>{errors.post && <p>{errors.post.message}</p>}</div>\n            <input type={'submit'} disabled={!isValid}/>\n        </form>\n    </>\n}","import React from 'react';\nimport Post from './Post/Post'\nimport s from './posts.module.css'\nimport {PostsPropsType} from './PostsContainer';\nimport {AddPostForm} from './AddPostForm';\n\n\nfunction Posts(props: PostsPropsType) {\n    const dialogs = props.posts.map((p, i) => {\n        return <Post key={i} message={p.message} likesCount={p.likesCount}/>\n    })\n\n    const AddPostHandler = (postMessage: string) => {\n        props.AddPost(postMessage);\n    }\n    return (\n        <>\n            <div className={s.postsBlock}><h3>my Posts</h3>\n                <div>\n                    <AddPostForm addPost={AddPostHandler}/>\n                </div>\n                <div className={s.posts}>\n                    {dialogs}\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport default Posts;","import React from 'react';\nimport Posts from './Posts';\nimport {\n    AddPostActionCreator,\n   PostType\n} from '../../../redux/profile-reducer';\nimport {connect} from 'react-redux';\nimport {Dispatch} from 'redux';\nimport {AppStateType} from '../../../redux/redux-store';\n\n\ntype MapStatePropsType = {\n    posts: Array<PostType>\n}\ntype MapDispatchPropsType = {\n    AddPost: (postMessage:string) => void\n}\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\n    return {\n        posts: state.profilePage.posts\n    }\n}\nconst mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\n    return {\n        AddPost: (postMessage:string) => dispatch(AddPostActionCreator(postMessage)),\n    }\n}\nexport type PostsPropsType = MapStatePropsType & MapDispatchPropsType\n\nexport const PostsContainer = connect(mapStateToProps, mapDispatchToProps)(Posts);","import React from 'react';\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\nimport {PostsContainer} from './Posts/PostsContainer';\nimport {profileType} from '../../redux/profile-reducer';\n\ntype ProfilePropsType = {\n    profile: profileType | null\n    status: string\n    updateUserStatus:(status: string)=>void\n}\n\nfunction Profile({profile,status,updateUserStatus}: ProfilePropsType) {\n    return (\n\n        <div>\n            <ProfileInfo profile={profile} status={status} updateUserStatus={updateUserStatus}/>\n            <PostsContainer/>\n        </div>);\n}\n\nexport default Profile;","import React from 'react';\nimport Profile from './Profile';\nimport {connect} from 'react-redux';\nimport {getUserProfile, getUserStatus, profileType, updateUserStatus} from '../../redux/profile-reducer';\nimport {AppStateType, DispatchType} from '../../redux/redux-store';\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\nimport WithAuthRedirect from '../../HOC/withAuthRedirect';\nimport {compose} from 'redux';\n\n\nclass ProfileContainer extends React.Component<ProfileContainerPropsType> {\n\n    componentDidMount() {\n        let userId = this.props.match.params.userId\n\n        if (!userId ) {\n            userId = String(this.props.autoryzedUserId)\n\n            if (!userId) {\n                this.props.history.push('/login')\n            }\n        }\n        this.props.getUserProfile(userId)\n        this.props.getUserStatus(userId)\n    }\n\n\n    render() {\n        return (\n\n            <div>\n                <Profile profile={this.props.profile} status={this.props.status}\n                         updateUserStatus={this.props.updateUserStatus}/>\n            </div>);\n    }\n}\n\n\n//types\ntype PathParamsType = {\n    userId: string,\n}\ntype mapStateToPropsType = {\n    profile: null | profileType\n    status: string\n    autoryzedUserId: null | number\n    isAuth: boolean\n}\ntype mapDispatchToPropsType = {\n    getUserProfile: (id: string) => void\n    getUserStatus: (id: string) => void\n    updateUserStatus: (status: string) => void\n}\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    autoryzedUserId: state.auth.userId,\n    isAuth: state.auth.isAuth\n})\nlet mapDispatchToProps = (dispatch: DispatchType): mapDispatchToPropsType => ({\n    getUserProfile: (id: string) => dispatch(getUserProfile(id)),\n    getUserStatus: (id: string) => dispatch(getUserStatus(id)),\n    updateUserStatus: (status: string) => dispatch(updateUserStatus(status)),\n})\n//так выглядит типизация withRouter\nexport type OwnPropsType = mapStateToPropsType & mapDispatchToPropsType\ntype ProfileContainerPropsType = RouteComponentProps<PathParamsType> & OwnPropsType\n\n\n// до рефакторинга\n// let AuthRedirectComponent = WithAuthRedirect(ProfileContainer)\n// HOC withRouter для снабжения ProfileContainer дополнит пропсами для того что бы брать id юзера (let userId = this.props.match.params.userId)\n// let WithURLDataContainerComponent = withRouter(AuthRedirectComponent)\n// export default connect(mapStateToProps, mapDispatchToProps)(WithURLDataContainerComponent);\n\n\n// после рефакторинга\n// функция compose позволяет создать цепочку вызовов функций, результат выполнений первой функции помещая е следующую в конвейере\nexport default compose<React.ComponentType>(connect(mapStateToProps, mapDispatchToProps), withRouter, WithAuthRedirect)(ProfileContainer)"],"names":["mapStateToProps","state","isAuth","auth","Component","connect","props","restProps","to","ProfileStatus","editMode","status","activeEditMode","setState","deactiveEditMode","updateUserStatus","onStatusChange","e","currentTarget","value","prevProps","prevState","snapshot","this","onChange","type","onBlur","autoFocus","onDoubleClick","React","profile","photos","large","src","className","s","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","Preloader","Image","message","likesCount","AddPostForm","addPost","useForm","mode","register","handleSubmit","reset","formState","errors","isValid","onSubmit","data","post","placeholder","required","minLength","disabled","dialogs","posts","map","p","i","postMessage","AddPost","PostsContainer","profilePage","dispatch","AddPostActionCreator","Posts","ProfileContainer","userId","match","params","String","autoryzedUserId","history","push","getUserProfile","getUserStatus","compose","id","withRouter","WithAuthRedirect"],"sourceRoot":""}