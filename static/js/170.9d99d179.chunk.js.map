{"version":3,"file":"static/js/170.9d99d179.chunk.js","mappings":"2LAQMA,EAAkB,SAACC,GAAD,MAA6C,CACjEC,OAAQD,EAAME,KAAKD,SAkBvB,IAdA,SAA6BE,GAWzB,OADqCC,EAAAA,EAAAA,IAAQL,EAARK,EATX,SAACC,GACvB,IAAKJ,EAAwBI,EAAxBJ,OAAWK,GAAhB,OAA6BD,EAA7B,GACA,OAAKJ,GAKE,SAACE,GAAD,UAAcG,KAFV,SAAC,KAAD,CAAUC,GAAI,gB,gFClBjC,G,QAA0B,0BAA1B,EAAiE,6BAAjE,EAAyG,0BCAzG,GAAgB,YAAc,gCAAgC,OAAS,2BAA2B,IAAM,yB,6BCsBxG,EAfmB,SAACF,GAChB,OACQ,gBAAKG,UAAWC,EAAAA,YAAhB,UACI,gBAAKD,UAAWC,EAAAA,OAAW,IAAMA,EAAAA,OAAjC,UACI,UAAC,KAAD,CAASF,GAAI,YAAaF,EAAMK,GACvBF,UAAW,SAAEG,GAAF,OAAgBA,EAAWF,EAAAA,OAAWA,EAAAA,aAD1D,WAEI,6BAAM,gBAAKG,IAAKC,EAAOL,UAAWC,EAAAA,MAAlC,YACA,0BAAOJ,EAAMS,eCdrC,EAA2B,0BAA3B,EAA+D,yBCc/D,EARgB,SAACT,GACb,OACI,gBAAKG,UAAWC,EAAhB,UACI,gBAAKD,UAAWC,EAAhB,SAA4BJ,EAAMU,a,oBCFjCC,EAAiB,SAAC,GAAsC,IAArCC,EAAoC,EAApCA,WAC5B,GAAsEC,EAAAA,EAAAA,IAAgB,CAACC,KAAM,aAAtFC,EAAP,EAAOA,SAAUC,EAAjB,EAAiBA,aAAcC,EAA/B,EAA+BA,MAA/B,IAAsCC,UAAYC,EAAlD,EAAkDA,OAAQC,EAA1D,EAA0DA,QAM1D,OADAC,QAAQC,IAAI,mBACL,+BACH,kBAAMC,SAAUP,GANH,SAACQ,GACdZ,EAAWY,EAAKd,SAChBO,OAIA,WACI,0BAAOQ,KAAK,OAAQC,YAAa,wGAA4BX,EAAS,UAAW,CAC7EY,UAAS,EACTC,UAAW,CACPC,MAAO,EACPnB,QAAS,yKAGjB,yBAAMS,EAAOT,UAAW,uBAAIS,EAAOT,QAAQA,aAC3C,kBAAOe,KAAM,SAAUK,UAAWV,UCsB9C,MAlCA,SAAiBpB,GAGb,IAMM+B,EAAkB/B,EAAMgC,YAAYC,YAAYC,KAAI,SAAAC,GACtD,OAAO,SAAC,EAAD,CAA4B1B,KAAM0B,EAAO1B,KAAMJ,GAAI8B,EAAO9B,IAAzC8B,EAAO9B,OAE7B+B,EAAmBpC,EAAMgC,YAAYK,YAAYH,KAAI,SAAAI,GACvD,OAAO,SAAC,EAAD,CAAoB5B,QAAS4B,EAAE5B,SAAjB4B,EAAEjC,OAI3B,OACI,+BACI,iBAAKF,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACK2B,KAEL,iBAAK5B,UAAWC,EAAhB,WACI,yBAAMgC,KAEN,0BAAK,SAACzB,EAAD,CAAgBC,WAvBV,SAAC2B,GACxBvC,EAAMY,WAAW2B,iB,8BCoBzB,GAAeC,EAAAA,EAAAA,KAA6BzC,EAAAA,EAAAA,KAjBtB,SAACJ,GACnB,MAAO,CACHqC,YAAarC,EAAM8C,eAGF,SAACC,GACtB,MAAO,CACH9B,WAAY,SAAC2B,GAETG,GAASC,EAAAA,EAAAA,GAAwBJ,SAQ4CK,EAAAA,EAAzF,CAA2GC,I","sources":["HOC/withAuthRedirect.tsx","webpack://samurai-way/./src/components/Dialogs/dialogs.module.css?1969","webpack://samurai-way/./src/components/Dialogs/DialogItem/DialogItem.module.css?beb9","components/Dialogs/DialogItem/DialogItem.tsx","webpack://samurai-way/./src/components/Dialogs/Message/Message.module.css?72d0","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["import React, {ComponentType} from 'react';\nimport {Redirect} from 'react-router-dom';\nimport {connect} from 'react-redux';\nimport {AppStateType} from '../redux/redux-store';\n\ntype mapStatePropsType = {\n    isAuth: boolean\n}\nconst mapStateToProps = (state: AppStateType): mapStatePropsType => ({\n    isAuth: state.auth.isAuth\n})\n\n// Типизация HOC !\nfunction WithAuthRedirect<T>(Component: ComponentType<T>) {\n    const RedirectComponent = (props: mapStatePropsType) => {\n        let {isAuth, ...restProps} = props\n        if (!isAuth) {\n            // на 6 версии router-dom\n            // return <Navigate to={'/login'}/>\n            return <Redirect to={'/login'}/>\n        }\n        return <Component{...restProps as T}/>\n    }\n    let ConnectedAuthRedirectComponent = connect(mapStateToProps)(RedirectComponent)\n    return ConnectedAuthRedirectComponent\n}\n\nexport default WithAuthRedirect;","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"dialogs_dialogs__LaVAm\",\"dialogItems\":\"dialogs_dialogItems__8YsZB\",\"messages\":\"dialogs_messages__Srn8e\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialogItems\":\"DialogItem_dialogItems__xEd7y\",\"active\":\"DialogItem_active__wvgh9\",\"img\":\"DialogItem_img__+FCAU\"};","import React from 'react';\nimport s from \"./DialogItem.module.css\"\nimport {NavLink} from 'react-router-dom';\nimport image from \"../../../img/yasher.jpg\"\nexport type DialogType ={\n    id:string\n    name:string\n}\nconst DialogItem = (props:DialogType) => {\n    return (\n            <div className={s.dialogItems}>\n                <div className={s.dialog + \" \" + s.active}>\n                    <NavLink to={'/dialogs/'+ props.id}\n                             className={( isActive) => (isActive ? s.active : s.dialogItems)}>\n                        <span><img src={image} className={s.img}/>     </span>\n                        <span>{props.name}</span>\n                    </NavLink>\n                </div>\n            </div>\n\n    );\n};\n\nexport default DialogItem;","// extracted by mini-css-extract-plugin\nexport default {\"messages\":\"Message_messages__eByBY\",\"message\":\"Message_message__rjHQQ\"};","import React from 'react';\nimport s from './Message.module.css';\n\nexport type MessageType ={\n    message:string\n\n}\nconst Message = (props:MessageType) => {\n    return (\n        <div className={s.messages}>\n            <div className={s.message}>{props.message}</div>\n        </div>\n    );\n};\n\nexport default Message;","import React from 'react';\nimport {FieldValues, useForm} from 'react-hook-form';\ntype AddMessagePropsType = {\n    addMessage:(message:string)=>void\n}\ntype Inputs = {\n    message: string,\n};\nexport const AddMessageForm = ({addMessage}:AddMessagePropsType) => {\n    const {register, handleSubmit, reset, formState: {errors, isValid}} = useForm<Inputs>({mode: 'onSubmit'})\n    const onSubmit = (data: FieldValues) => {\n        addMessage(data.message)\n        reset()\n    }\n    console.log('AddMessageForm')\n    return <>\n        <form onSubmit={handleSubmit(onSubmit)}>\n            <input type=\"text\"  placeholder={'Введите сообщение...'} {...register('message', {\n                required:true,\n                minLength: {\n                    value: 1,\n                    message: 'Сообщение не может быть пустым'\n                }\n            })}/>\n            <div>{errors.message && <p>{errors.message.message}</p>}</div>\n            <input type={'submit'} disabled={!isValid}/>\n        </form>\n    </>\n}","import React from 'react';\nimport s from './dialogs.module.css'\nimport DialogItem from './DialogItem/DialogItem';\nimport Message from './Message/Message';\nimport {AddItemForm} from '../HelpComponent/AddItemForm';\nimport {DialogsPropsType} from './DialogsContainer';\nimport { Redirect} from 'react-router-dom';\nimport WithAuthRedirect from '../../HOC/withAuthRedirect';\nimport {AddMessageForm} from './AddMessageForm';\n\n\n\n\nfunction Dialogs(props: DialogsPropsType) {\n\n\n    const onSendMessageClick = (newText:string) => {\n        props.addMessage(newText)\n    }\n\n\n\n    const dialogsElements = props.dialogsPage.dialogsData.map(dialog => {\n        return <DialogItem key={dialog.id} name={dialog.name} id={dialog.id}/>\n    })\n    const messagesElements = props.dialogsPage.messageData.map(m => {\n        return <Message key={m.id} message={m.message}/>\n    })\n\n\n    return (\n        <>\n            <div className={s.dialogs}>\n                <div className={s.dialogItems}>\n                    {dialogsElements}\n                </div>\n                <div className={s.messages}>\n                    <div>{messagesElements}</div>\n                    {/*<div><AddItemForm AddItem={onSendMessageClick} title={'Send'} placeholder={'Напишите сообщение...'}/></div>*/}\n                    <div><AddMessageForm addMessage={onSendMessageClick}/></div>\n                </div>\n            </div>\n\n        </>\n    )\n}\n\nexport default Dialogs\n\n\n","import React from 'react';\nimport {\n    AddMessageActionCreator,\n    InitialStateDialogsType\n} from '../../redux/dialog-reducer';\nimport Dialogs from './Dialogs';\nimport {connect} from 'react-redux';\nimport {AppStateType} from '../../redux/redux-store';\nimport {compose, Dispatch} from 'redux';\nimport WithAuthRedirect from '../../HOC/withAuthRedirect';\n\n\n\ntype mapStatePropsType ={\n    dialogsPage:InitialStateDialogsType\n}\ntype mapDispatchPropsType ={\n    addMessage:(newText: string)=>void\n}\n\nlet mapStateToProps = (state: AppStateType):mapStatePropsType => {\n    return {\n        dialogsPage: state.dialogPage\n    }\n}\nlet mapDispatchToProps = (dispatch:Dispatch):mapDispatchPropsType => {\n    return {\n        addMessage: (newText: string)=>{\n            // dispatch(ChangeMessageTextActionCreator(newText))\n            dispatch(AddMessageActionCreator(newText))\n        }\n    }\n}\n\nexport type DialogsPropsType = mapStatePropsType&mapDispatchPropsType\n\n// функция compose позволяет создать цепочку вызовов функций, результат выполнений первой функции помещая е следующую в конвейере\nexport default compose<React.ComponentType>(connect(mapStateToProps, mapDispatchToProps),WithAuthRedirect)(Dialogs)\n\n"],"names":["mapStateToProps","state","isAuth","auth","Component","connect","props","restProps","to","className","s","id","isActive","src","image","name","message","AddMessageForm","addMessage","useForm","mode","register","handleSubmit","reset","formState","errors","isValid","console","log","onSubmit","data","type","placeholder","required","minLength","value","disabled","dialogsElements","dialogsPage","dialogsData","map","dialog","messagesElements","messageData","m","newText","compose","dialogPage","dispatch","AddMessageActionCreator","WithAuthRedirect","Dialogs"],"sourceRoot":""}